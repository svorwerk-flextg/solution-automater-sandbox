# Envoy configuration for AI Sandbox Security Gateway
# Enforces authentication, rate limiting, and request filtering

static_resources:
  listeners:
  - name: https_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_https
          codec_type: AUTO
          
          # Request handling
          request_timeout: 300s  # 5 minutes max request time
          stream_idle_timeout: 60s
          
          route_config:
            name: local_route
            virtual_hosts:
            - name: sandbox_service
              domains: ["*"]
              routes:
              # Session Manager API
              - match:
                  prefix: "/api/sessions"
                route:
                  cluster: session_manager
                  timeout: 30s
                per_filter_config:
                  envoy.filters.http.rbac:
                    rbac:
                      action: ALLOW
                      policies:
                        "admin_policy":
                          principals:
                          - authenticated:
                              principal_name:
                                exact: "admin"
                          permissions:
                          - any: true
                        "user_policy":
                          principals:
                          - authenticated:
                              principal_name:
                                prefix: "user_"
                          permissions:
                          - header:
                              name: ":method"
                              string_match:
                                exact: "GET"
                          - header:
                              name: ":method"
                              string_match:
                                exact: "POST"
                                
              # Orchestrator API
              - match:
                  prefix: "/api/orchestrator"
                route:
                  cluster: orchestrator
                  timeout: 30s
                  
              # Agent API (internal only)
              - match:
                  prefix: "/api/agent"
                route:
                  cluster: agent_cluster
                  timeout: 300s
                per_filter_config:
                  envoy.filters.http.rbac:
                    rbac:
                      action: DENY
                      policies:
                        "external_access":
                          principals:
                          - source_ip:
                              address_prefix: 0.0.0.0
                              prefix_len: 0
                          permissions:
                          - any: true
                          
              # Health check
              - match:
                  path: "/health"
                direct_response:
                  status: 200
                  body:
                    inline_string: "OK"
                    
              # Default deny
              - match:
                  prefix: "/"
                direct_response:
                  status: 403
                  body:
                    inline_string: "Forbidden"
                    
          http_filters:
          # JWT Authentication
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                sandbox_auth:
                  issuer: "https://sandbox.ai/auth"
                  audiences:
                  - "sandbox-api"
                  local_jwks:
                    inline_string: |
                      {
                        "keys": [
                          {
                            "kty": "RSA",
                            "kid": "sandbox-key-1",
                            "use": "sig",
                            "n": "...",
                            "e": "AQAB"
                          }
                        ]
                      }
                  forward: true
                  forward_payload_header: "x-jwt-payload"
              rules:
              - match:
                  prefix: "/api/"
                requires:
                  provider_name: "sandbox_auth"
                  
          # Rate Limiting
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/udpa.type.v1.TypedStruct
              type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              value:
                stat_prefix: http_local_rate_limiter
                token_bucket:
                  max_tokens: 100
                  tokens_per_fill: 100
                  fill_interval: 60s
                filter_enabled:
                  runtime_key: local_rate_limit_enabled
                  default_value:
                    numerator: 100
                    denominator: HUNDRED
                filter_enforced:
                  runtime_key: local_rate_limit_enforced
                  default_value:
                    numerator: 100
                    denominator: HUNDRED
                response_headers_to_add:
                  - append: false
                    header:
                      key: x-local-rate-limit
                      value: 'true'
                      
          # Request Size Limiting
          - name: envoy.filters.http.buffer
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer
              max_request_bytes: 10485760  # 10MB max request size
              
          # RBAC (Role-Based Access Control)
          - name: envoy.filters.http.rbac
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.rbac.v3.RBAC
              rules:
                action: ALLOW
                policies:
                  "allow_internal":
                    permissions:
                    - any: true
                    principals:
                    - source_ip:
                        address_prefix: 172.21.0.0
                        prefix_len: 24
                    - source_ip:
                        address_prefix: 172.22.0.0
                        prefix_len: 24
                    - source_ip:
                        address_prefix: 172.23.0.0
                        prefix_len: 24
                        
          # Request Filtering (Block dangerous patterns)
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  -- Block SQL injection attempts
                  local body = request_handle:body()
                  if body then
                    local body_str = body:getBytes(0, body:length())
                    local dangerous_patterns = {
                      "INSERT%s+INTO",
                      "UPDATE%s+.*%s+SET",
                      "DELETE%s+FROM",
                      "DROP%s+TABLE",
                      "CREATE%s+TABLE",
                      "ALTER%s+TABLE",
                      "EXEC%s*%(",
                      "UNION%s+SELECT"
                    }
                    
                    for _, pattern in ipairs(dangerous_patterns) do
                      if string.match(body_str:upper(), pattern) then
                        request_handle:respond(
                          {[":status"] = "400"},
                          "Potentially dangerous SQL pattern detected"
                        )
                        return
                      end
                    end
                  end
                  
                  -- Add security headers
                  request_handle:headers():add("x-request-id", request_handle:headers():get("x-request-id") or "unknown")
                  request_handle:headers():add("x-forwarded-proto", "https")
                end
                
                function envoy_on_response(response_handle)
                  -- Add security response headers
                  response_handle:headers():add("strict-transport-security", "max-age=31536000; includeSubDomains")
                  response_handle:headers():add("x-content-type-options", "nosniff")
                  response_handle:headers():add("x-frame-options", "DENY")
                  response_handle:headers():add("x-xss-protection", "1; mode=block")
                  response_handle:headers():add("content-security-policy", "default-src 'self'")
                  response_handle:headers():add("referrer-policy", "strict-origin-when-cross-origin")
                end
                
          # CORS
          - name: envoy.filters.http.cors
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
              
          # Router (must be last)
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: "/etc/ssl/certs/server.crt"
              private_key:
                filename: "/etc/ssl/certs/server.key"
            validation_context:
              trusted_ca:
                filename: "/etc/ssl/certs/ca.crt"
            alpn_protocols: ["h2", "http/1.1"]
            
  clusters:
  # Session Manager cluster
  - name: session_manager
    connect_timeout: 5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: session_manager
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: session-manager
                port_value: 8080
    health_checks:
    - timeout: 1s
      interval: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
      http_health_check:
        path: /health
        
  # Orchestrator cluster
  - name: orchestrator
    connect_timeout: 5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: orchestrator
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: orchestrator
                port_value: 8081
                
  # Agent cluster (internal)
  - name: agent_cluster
    connect_timeout: 5s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: agent_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: agent-network
                port_value: 8082
                
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 8001